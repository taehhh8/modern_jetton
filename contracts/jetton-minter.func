#include "stdlib.func";
#include "jetton-utils.func";
#include "error-codes.func";
#include "op-codes.func";
#include "params.func";
#include "messages.func";

;; 스토리지 최소 보관 비용 (0.1 TON)
const int min_tons_for_storage = 10000000;
;; 가스 소비량 설정 (송신자와 수신자 지갑 모두의 수수료를 커버하기 위함)
const int gas_consumption = 14000000;

{-
  스토리지 구조
  storage#_ balance:Coins owner_address:MsgAddressInt jetton_master_address:MsgAddressInt jetton_wallet_code:^Cell = Storage;
-}

;; 데이터 로드 함수: 잔액, 소유자 주소, 마스터 주소, 지갑 코드를 반환
(int, slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_coins(),           ;; balance
            ds~load_msg_addr(),        ;; owner_address
            ds~load_msg_addr(),        ;; jetton_master_address
            ds~load_ref());            ;; jetton_wallet_code
}

;; 데이터 저장 함수: 지갑의 상태를 저장
() save_data (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) impure inline {
    set_data(pack_jetton_wallet_data(balance,
                                    owner_address,
                                    jetton_master_address,
                                    jetton_wallet_code));
}

;; 토큰 전송 함수: 다른 지갑으로 토큰을 전송
() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
    int query_id = in_msg_body~load_query_id();
    int jetton_amount = in_msg_body~load_coins();
    slice to_owner_address = in_msg_body~load_msg_addr();
    force_chain(to_owner_address);
    
    ;; 현재 지갑 데이터 로드
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    balance -= jetton_amount;

    ;; 권한 및 잔액 확인
    throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));
    throw_unless(error::not_enough_jettons, balance >= 0);

    ;; 메시지 생성 및 전송
    cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
    slice to_wallet_address = calc_address(state_init);
    
    ;; ... 나머지 전송 로직 ...
}

;; 토큰 수신 함수: 다른 지갑으로부터 토큰을 받음
() receive_tokens (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure inline_ref {
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    
    int query_id = in_msg_body~load_query_id();
    int jetton_amount = in_msg_body~load_coins();
    balance += jetton_amount;
    
    ;; 송신자 검증
    slice from_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    
    ;; ... 나머지 수신 로직 ...
}

;; 토큰 소각(번) 함수: 토큰을 영구적으로 제거
() burn_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    
    int query_id = in_msg_body~load_query_id();
    int jetton_amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();
    
    balance -= jetton_amount;
    
    ;; 권한 및 수수료 확인
    throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));
    throw_unless(error::not_enough_jettons, balance >= 0);
    throw_unless(error::burn_fee_not_matched, msg_value > fwd_fee + 2 * gas_consumption);
    
    ;; ... 나머지 소각 로직 ...
}

;; 바운스 처리 함수: 실패한 전송에 대한 처리
() on_bounce (slice in_msg_body) impure inline_ref {
    in_msg_body~skip_bounce_flag();
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    
    int op = in_msg_body~load_op();
    throw_unless(error::unknown_action_bounced, (op == op::internal_transfer) | (op == op::burn_notification));
    
    ;; 바운스된 금액 복구
    int query_id = in_msg_body~load_query_id();
    int jetton_amount = in_msg_body~load_coins();
    balance += jetton_amount;
    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

;; 메인 리시버 함수: 모든 인커밍 메시지 처리
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { return (); }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    ;; 발신자 주소와 전달 수수료 추출
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();  ;; skip dst
    cs~load_coins();     ;; skip value
    cs~skip_bits(1);     ;; skip extracurrency collection
    cs~load_coins();     ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2);  ;; 전달 수수료 계산

    ;; 작업 코드에 따른 함수 실행
    int op = in_msg_body~load_op();

    if (op == op::transfer) {           ;; 전송
        send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }
    if (op == op::internal_transfer) {  ;; 내부 전송
        receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }
    if (op == op::burn) {               ;; 소각
        burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }
    
    ;; ... 기타 작업 처리 ...
}

;; 지갑 데이터 조회 getter 함수
(int, slice, slice, cell) get_wallet_data() method_id {
    return load_data();
}